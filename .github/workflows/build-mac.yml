# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build Mac binaries

on:
  workflow_call:
    inputs:
      artifact-retention-days:
        description: 'Number of days to retain artifacts'
        default: 1
        required: false
        type: number
      version:
        description: 'Version to build'
        required: true
        type: string
    outputs:
      artifact-name:
        value: ${{ jobs.build-mac.outputs.artifact-name }}
      artifact-content-type:
        value: ${{ jobs.build-mac.outputs.artifact-content-type }}

      
  workflow_dispatch:
    inputs:
      artifact-retention-days:
        description: 'Number of days to retain artifacts'
        default: 1
        required: false
        type: number
      version:
        description: 'Version to build'
        required: true
        type: string

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  APP_NAME: helloworld
  QT_VERSION: '6.8.3'
  PRODUCT_NAME: "My Qt Application"
  BUNDLE_ID: "com.example.myqtapp"
  DMG_TITLE: "Install QtPlayground"
  DMG_NAME: "QtPlayground-${{ inputs.version }}.dmg"
  VERSION: ${{ inputs.version }}
  BUILD_OUTPUT_DIR: ${{ github.workspace }}/build

jobs:
  build-mac:
    runs-on: macos-latest
    outputs:
      artifact-name: ${{ steps.set-outputs.outputs.artifact-name }}
      artifact-content-type: ${{ steps.set-outputs.outputs.artifact-content-type }}
    steps:
      - run: |
          echo "Running on macOS $(sw_vers -productVersion)"
          echo "artifact-retention-days: ${{ inputs.artifact-retention-days }}"
          echo "version: ${{ inputs.version }}"


      - uses: actions/checkout@v4
  
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
 
      # Install other dependencies
      - run: |
           brew install --formula cmake create-dmg

      # # Install ninja
      # - uses: seanmiddleditch/gha-setup-ninja@master

      # Install qt
      - uses: jurplel/install-qt-action@v4
        with:
            aqtversion: '==3.1.*'
            version: ${{ env.QT_VERSION }}
            host: 'mac'
            target: 'desktop'
            arch: 'clang_64'
            install-deps: true
    
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      - run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -S ${{ github.workspace }}

      # build binary
      - run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{env.BUILD_TYPE}}

      - run: |
          ls -lR ${{ steps.strings.outputs.build-output-dir }}
          echo "Qt6_DIR = $Qt6_DIR"


      # - name: Create app bundle
      #   run: |
      #     cd build
      #     # Create the basic structure (adjust according to your project's structure)
      #     mkdir -p "${{ env.APP_NAME }}.app/Contents/"{MacOS,Resources,Frameworks}
      #     cp "${{ env.APP_NAME }}" "${{ env.APP_NAME }}.app/Contents/MacOS/"
          
      #     # Create Info.plist
      #     cat > "${{ env.APP_NAME }}.app/Contents/Info.plist" << EOF
      #     <?xml version="1.0" encoding="UTF-8"?>
      #     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      #     <plist version="1.0">
      #     <dict>
      #         <key>CFBundleExecutable</key>
      #         <string>${{ env.APP_NAME }}</string>
      #         <key>CFBundleIconFile</key>
      #         <string>AppIcon</string>
      #         <key>CFBundleIdentifier</key>
      #         <string>${{ env.BUNDLE_ID }}</string>
      #         <key>CFBundlePackageType</key>
      #         <string>APPL</string>
      #         <key>CFBundleName</key>
      #         <string>${{ env.PRODUCT_NAME }}</string>
      #         <key>CFBundleVersion</key>
      #         <string>${{ env.VERSION }}</string>
      #         <key>CFBundleShortVersionString</key>
      #         <string>${{ env.VERSION }}</string>
      #         <key>NSPrincipalClass</key>
      #         <string>NSApplication</string>
      #         <key>NSHighResolutionCapable</key>
      #         <true/>
      #     </dict>
      #     </plist>
      #     EOF

      - run: ls -lR /Users/runner/work/qt6-playground/Qt/

      - name: Deploy Qt dependencies with macdeployqt
        run: |
          # cd build
          env
          pwd
          macdeployqt "${{ steps.strings.outputs.build-output-dir }}/${{ env.APP_NAME }}.app" -verbose=9
          # need to sign again, see https://github.com/orgs/Homebrew/discussions/3088

      - name: Sign the application
        run: |
          # Script to create a self-signed certificate and sign an app

          # Configuration variables
          APP_PATH="${{ steps.strings.outputs.build-output-dir }}/${{ env.APP_NAME }}.app"
          KEYCHAIN_NAME="build.keychain"
          KEYCHAIN_PASSWORD="your-secure-password"
          CERT_NAME="Self Signed Developer"
          CERT_IDENTITY="Self Signed Developer"  # This will be the identity name for codesign

          echo "Creating temporary keychain..."
          # Create a temporary keychain and add it to the search list
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | tr -d '"')
          security default-keychain -s "$KEYCHAIN_NAME"  # Make it the default for this session

          echo "Creating self-signed certificate using openssl..."
          # Create a private key
          openssl genrsa -out private.key 2048

          # Create a certificate signing request
          cat > openssl.cnf << EOF
          [req]
          default_bits = 2048
          prompt = no
          default_md = sha256
          distinguished_name = dn
          [dn]
          CN = $CERT_NAME
          OU = Development
          O = Your Organization
          C = US
          EOF

          openssl req -new -key private.key -out request.csr -config openssl.cnf

          # Create self-signed certificate
          openssl x509 -req -days 365 -in request.csr -signkey private.key -out certificate.crt

          # Create PKCS#12 file for import into keychain
          openssl pkcs12 -export -out certificate.p12 -inkey private.key -in certificate.crt -passout pass:temp

          echo "Importing certificate into keychain..."
          # Import the certificate into the keychain
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P temp -T /usr/bin/codesign

          echo "Configuring keychain for codesign..."
          # Set keychain to not lock and allow codesign to access without prompting
          security set-keychain-settings -u "$KEYCHAIN_NAME"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"

          echo "Available identities for signing:"
          security find-identity -v -p codesigning "$KEYCHAIN_NAME"

          # Get the actual identity hash to use with codesign
          IDENTITY_HASH=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | grep "$CERT_NAME" | awk '{print $2}')

          if [ -z "$IDENTITY_HASH" ]; then
            echo "Error: Could not find the signing identity hash. Certificate import may have failed."
            exit 1
          fi

          echo "Using identity hash: $IDENTITY_HASH"

          echo "Creating entitlements file..."
          # Create a simple entitlements file
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.app-sandbox</key>
              <false/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
          </dict>
          </plist>
          EOF

          echo "Signing application..."
          # Sign the application with the self-signed certificate
          codesign --force --deep --options runtime \
            --entitlements entitlements.plist \
            --keychain "$KEYCHAIN_NAME" \
            --sign "$IDENTITY_HASH" \
            "$APP_PATH"

          echo "Verifying signature..."
          codesign --verify --verbose=4 "$APP_PATH"
          codesign -dvv "$APP_PATH"

          echo "Cleaning up temporary files..."
          rm -f private.key request.csr certificate.crt certificate.p12 openssl.cnf

          echo "Done! Your application has been signed with a self-signed certificate."




      - name: Create DMG
        run: |
          cd "${{ steps.strings.outputs.build-output-dir }}/"
          mkdir -p dmg_contents
          cp -R "${{ env.APP_NAME }}.app" dmg_contents/
          ls -lR dmg_contents/
          # hdiutil create -volname "${{ env.DMG_TITLE }}" -srcfolder "${{ env.APP_NAME }}.app" -ov -format UDZO "${{ env.DMG_NAME }}"
        
          create-dmg \
            --volname "${{ env.DMG_TITLE }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "${{ env.APP_NAME }}.app" 200 190 \
            --app-drop-link 600 185 \
            --no-internet-enable \
            "${{ env.DMG_NAME }}" \
            "dmg_contents/" \
            || true  # create-dmg returns 1 when it creates the DMG successfully
            #         --volicon "../resources/AppIcon.icns" \


          # Verify DMG was created
          ls -la "${{ env.DMG_NAME }}"

      - id: set-outputs
        run: |
          echo "artifact-name=${{ env.DMG_NAME }}" >> "$GITHUB_OUTPUT"
          echo "artifact-content-type=application/x-dmg" >> "$GITHUB_OUTPUT"


      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac-binary
          path: "${{ steps.strings.outputs.build-output-dir }}/${{ env.DMG_NAME }}"
          retention-days: ${{ inputs.artifact-retention-days }}
