# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build Mac binaries

on:
  workflow_call:
    inputs:
      artifact-retention-days:
        description: 'Number of days to retain artifacts'
        default: 1
        required: false
        type: number
      version:
        description: 'Version to build'
        required: true
        type: string
    outputs:
      artifact-name:
        value: ${{ jobs.build-mac.outputs.artifact-name }}
      artifact-content-type:
        value: ${{ jobs.build-mac.outputs.artifact-content-type }}

      
  workflow_dispatch:
    inputs:
      artifact-retention-days:
        description: 'Number of days to retain artifacts'
        default: 1
        required: false
        type: number
      version:
        description: 'Version to build'
        required: true
        type: string

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  APP_NAME: helloworld
  QT_VERSION: '6.8.3'
  PRODUCT_NAME: "My Qt Application"
  BUNDLE_ID: "com.example.myqtapp"
  DMG_TITLE: "Install QtPlayground"
  DMG_NAME: "QtPlayground-${{ inputs.version }}.dmg"
  VERSION: ${{ inputs.version }}
  BUILD_OUTPUT_DIR: ${{ github.workspace }}/build

jobs:
  build-mac:
    runs-on: macos-latest
    outputs:
      artifact-name: ${{ steps.set-outputs.outputs.artifact-name }}
      artifact-content-type: ${{ steps.set-outputs.outputs.artifact-content-type }}
    steps:
      - run: |
          echo "Running on macOS $(sw_vers -productVersion)"
          echo "artifact-retention-days: ${{ inputs.artifact-retention-days }}"
          echo "version: ${{ inputs.version }}"

      - uses: actions/checkout@v4
  
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      - name: Set vars
        id: vars
        shell: bash
        run: |
          echo "build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
 
      # Install other dependencies
      - run: |
           brew install --formula cmake create-dmg

      # # Install ninja
      # - uses: seanmiddleditch/gha-setup-ninja@master

      # Install qt
      - uses: jurplel/install-qt-action@v4
        with:
            aqtversion: '==3.1.*'
            version: ${{ env.QT_VERSION }}
            host: 'mac'
            target: 'desktop'
            arch: 'clang_64'
            install-deps: true
    
      - name: Build binary and dmg
        run: |
          cmake -B ${{ steps.vars.outputs.build-dir }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -S ${{ github.workspace }}
          cd ${{ steps.vars.outputs.build-dir }}
          cmake --build . --config ${{env.BUILD_TYPE}}
          macdeployqt "${{ env.APP_NAME }}.app" -codesign=- -verbose=4 

          # Create DMG
          mkdir -p dmg_contents
          cp -R "${{ env.APP_NAME }}.app" dmg_contents/
          create-dmg \
            --volname "${{ env.DMG_TITLE }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "${{ env.APP_NAME }}.app" 200 190 \
            --app-drop-link 600 185 \
            --no-internet-enable \
            "${{ env.DMG_NAME }}" \
            "dmg_contents/" \
            || true  # create-dmg returns 1 when it creates the DMG successfully
            #         --volicon "../resources/AppIcon.icns" \

      - id: set-outputs
        run: |
          echo "artifact-name=${{ env.DMG_NAME }}" >> "$GITHUB_OUTPUT"
          echo "artifact-content-type=application/x-dmg" >> "$GITHUB_OUTPUT"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac-binary
          path: "${{ steps.vars.outputs.build-dir }}/${{ env.DMG_NAME }}"
          retention-days: ${{ inputs.artifact-retention-days }}
