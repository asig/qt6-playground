# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build Windows binaries

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

 
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-win:
    permissions:
      contents: write

    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
  
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
  
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
            aqtversion: '==3.1.*'
            version: '6.7.3'
            host: 'windows'
            target: 'desktop'
            arch: 'win64_mingw'
            tools: 'tools_mingw1310'
            install-deps: true
    
      - run: |
            echo "${{ env.QT_ROOT_DIR }}"
            echo "${{  env.GITHUB_PATH }}"
            dir ${{ env.QT_ROOT_DIR }}/../../Tools
            dir ${{ env.QT_ROOT_DIR }}/../../Tools/mingw1310_64/bin

      - name: Install NSIS
        run: |
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          scoop update
          scoop bucket add extras
          scoop install nsis

      - name: Print NSIS version and flags
        run: |
          makensis -VERSION
          makensis -HDRINFO

          # - name: Install dependencies
      #   # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      #   id: deps
      #   shell: bash
      #   run: |
      #     sudo apt-get install  qt6-base-dev qt6-svg nsis
  
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ env.QT_ROOT_DIR }}/../../Tools/mingw1310_64/bin/g++.exe
          -DCMAKE_C_COMPILER=${{ env.QT_ROOT_DIR }}/../../Tools/mingw1310_64/bin/gcc.exe
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -S ${{ github.workspace }}
  
      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{env.BUILD_TYPE}}
  
      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{env.BUILD_TYPE}}

      - name: Debugging
        run: |
          # ls -lR "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          dir ${{ steps.strings.outputs.build-output-dir }}


      - name: Run Qtwindeploy
        run: |
          dir ${{ steps.strings.outputs.build-output-dir }}
          dir ${{ steps.strings.outputs.build-output-dir }}/${{env.BUILD_TYPE}}
          windeployqt.exe --release ${{ steps.strings.outputs.build-output-dir }}/${{env.BUILD_TYPE}}/helloworld.exe

      - name: Build Installer
        run:
          makensis /DVERSION=0.0.1 /DARCH=x86_64 /DSOURCE_DIR=${{ github.workspace }} /DBUILD_DIR=${{steps.strings.outputs.build-output-dir }}/${{env.BUILD_TYPE}} installer/win/installer.nsi

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: executable
          path: ${{ steps.strings.outputs.build-output-dir }}/${{env.BUILD_TYPE}}/playground-0.0.1-x86_64-Setup.exe
          






      #   - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: false
      #     prerelease: false
      # - name: Upload Release Asset
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./my-artifact.zip
      #     asset_name: my-artifact.zip
      #     asset_content_type: application/zip
