# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build Linux binaries

on:
  workflow_call:
    inputs:
      artifact-retention-days:
        description: 'Number of days to retain artifacts'
        default: 1
        required: false
        type: number
      version:
        description: 'Version to build'
        required: true
        type: string
    outputs:
      artifact-name:
        value: ${{ jobs.build-linux.outputs.artifact-name }}
      artifact-content-type:
        value: ${{ jobs.build-linux.outputs.artifact-content-type }}

      
  workflow_dispatch:
    inputs:
      artifact-retention-days:
        description: 'Number of days to retain artifacts'
        default: 1
        required: false
        type: number
      version:
        description: 'Version to build'
        required: true
        type: string
 
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  APPIMAGE_NAME: "QtPlayground-${{ inputs.version }}-x86_64.AppImage"

jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.set-outputs.outputs.artifact-name }}
      artifact-content-type: ${{ steps.set-outputs.outputs.artifact-content-type }}
    steps:
      - uses: actions/checkout@v4
  
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
  
      # - name: Install Qt
      #   uses: jurplel/install-qt-action@v4
      #   with:
      #     version: ${{ env.QT_VERSION }}
      #     target: "desktop"
      #     install-deps: true
  
      - name: Install dependencies
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: deps
        shell: bash
        run: |
          sudo apt-get install  qt6-base-dev qt6-svg
  
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=g++
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          -S ${{ github.workspace }}
  
      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{env.BUILD_TYPE}}
  
      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{env.BUILD_TYPE}}

      - id: set-outputs
        run: |
          echo "artifact-name=${{ env.APPIMAGE_NAME }}" >> "$GITHUB_OUTPUT"
          echo "artifact-content-type=application/octet-stream" >> "$GITHUB_OUTPUT"

      - name: Create AppImage
        run: |
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}/AppDir/usr/bin
          cp ${{ steps.strings.outputs.build-output-dir }}/your_executable ${{ steps.strings.outputs.build-output-dir }}/AppDir/usr/bin/
          wget -qO- https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage > appimagetool
          chmod +x appimagetool
          ./appimagetool ${{ steps.strings.outputs.build-output-dir }}/AppDir ${{ steps.strings.outputs.build-output-dir }}/${{ env.APPIMAGE_NAME }}


      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          retention-days: ${{ github.event.inputs.artifact-retention-days }}
          path: ${{ steps.strings.outputs.build-output-dir }}/${{ env.APPIMAGE_NAME }}


