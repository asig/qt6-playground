# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build Linux binaries

on:
  workflow_call:
    inputs:
      artifact-retention-days:
        description: 'Number of days to retain artifacts'
        default: 1
        required: false
        type: number
      version:
        description: 'Version to build'
        required: true
        type: string
    outputs:
      artifact-name:
        value: ${{ jobs.build-linux.outputs.artifact-name }}
      artifact-content-type:
        value: ${{ jobs.build-linux.outputs.artifact-content-type }}

      
  workflow_dispatch:
    inputs:
      artifact-retention-days:
        description: 'Number of days to retain artifacts'
        default: 1
        required: false
        type: number
      version:
        description: 'Version to build'
        required: true
        type: string
 
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  EXECUTABLE_NAME: helloworld
  APPIMAGE_NAME: "QtPlayground-${{ inputs.version }}-x86_64.AppImage"
  QT_VERSION: '6.8.3'
  PRODUCT_NAME: "My Qt Application"
  VERSION: ${{ inputs.version }}
  BUILD_DIR: ${{ github.workspace }}/build

jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.set-outputs.outputs.artifact-name }}
      artifact-content-type: ${{ steps.set-outputs.outputs.artifact-content-type }}
    steps:
      - uses: actions/checkout@v4
  
 
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          target: "desktop"
          install-deps: true      

      # - name: Install dependencies
      #   # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      #   id: deps
      #   shell: bash
      #   run: |
      #     sudo apt-get install  qt6-base-dev qt6-svg
  
      - name: Build
        run: |
          echo "Running on Linux"
          echo "artifact-retention-days: ${{ inputs.artifact-retention-days }}"
          echo "version: ${{ inputs.version }}"
          echo "Env-vars:"
          env

          # Generate makefiles
          cmake -B ${{ env.BUILD_DIR }}
          -DCMAKE_CXX_COMPILER=g++
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          -S ${{ github.workspace }}

          cd ${{ env.BUILD_DIR }}

          # Build
          cmake --build . --config ${{env.BUILD_TYPE}}

          # Test
          ctest --build-config ${{env.BUILD_TYPE}}

          # Create AppImage
          mkdir -p AppDir/usr/bin
          cp ${{ env.EXECUTABLE_NAME }} AppDir/usr/bin/

          wget -qO- https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage > appimagetool
          chmod +x appimagetool

          ./appimagetool AppDir ${{ env.APPIMAGE_NAME }}

      - id: set-outputs
        run: |
          echo "artifact-name=${{ env.APPIMAGE_NAME }}" >> "$GITHUB_OUTPUT"
          echo "artifact-content-type=application/octet-stream" >> "$GITHUB_OUTPUT"


      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          retention-days: ${{ github.event.inputs.artifact-retention-days }}
          path: ${{ env.BUILD_DIR }}/${{ env.APPIMAGE_NAME }}


